
nscgi - CGI/SCGI/FCGI Support
Generated from file '' by tcllib/doctools with format 'text'
nscgi(n) 1.0.0  "CGI/SCGI/FCGI Support"

NAME
====

nscgi - Class to manipulate CGI/SCGI/FCGI values.

SYNOPSIS
========

package require Tcl 8.6
package require nscgi ?1.0.0?

*nscgi* new args
nscgiObject configure args
nscgiObject cookie cookie
nscgiObject decode str
nscgiObject empty name
nscgiObject exists name
nscgiObject encode string
nscgiObject header ?type? args
nscgiObject import cginame ?tclname?
nscgiObject importAll args
nscgiObject importFile cmd cginame ?filename?
nscgiObject initCGI
nscgiObject input ?fakeinput? ?fakecookie?
nscgiObject multipart type query
nscgiObject nvlist
nscgiObject names
nscgiObject parse
nscgiObject parseMimeValue value
nscgiObject query
nscgiObject redirect url
nscgiObject setCookie args
nscgiObject setDefaultValue key defvalue
nscgiObject setDefaultValueList key defvaluelist
nscgiObject setValue key value
nscgiObject setValueList key valuelist
nscgiObject type
nscgiObject urlStub ?url?
nscgiObject value key ?default?
nscgiObject valueList key ?default?

DESCRIPTION
===========

The *nscgi* package provides a _oo::class_ class that manipulates CGI, SCGI and
FCGI values. These are values that come from Web forms and are processed by CGI
scripts. Use the *nscgi* package to query these values, set and get cookies, and
encode and decode www-url-encoded values.

The *nscgi* package is based in *ncgi* package.

In the simplest case, a CGI script first creates a *nscgi* object, calls the
parse method and then calls the value method to get different form values. If a
CGI value is repeated, you should use the valueList method to get back the
complete list of values.

An alternative to the parse method is the input method, which has semantics
similar to Don Libes' cgi_input procedure. The input method restricts repeated
CGI values to have names that end with "List". In this case, the value method
will return the complete list of values, and the input method will raise errors
if it finds repeated form elements without the right name.

The reset method can be used in test suites and Web servers to initialize the
source of the CGI values.

The initCGI method can be used to initialize the source of the (plain) CGI
values from the environment variables and from _stdin_.

The complete set of methods is described below.

nscgi class and methods
=======================

    *nscgi* new args

        Arguments for the constructor can be specified as key-value pairs when
        creating a new object. Known arguments are:

        headers

            CGI headers.

        body

            CGI contents sent by upload.

        init_cgi

            Initialiase the object with headers from the environment variables
            and body from _stdin_. Use this option when using plain CGI.

    nscgiObject configure args

        When one argument is specified, the argument value is returned. When
        more than one argument is specified, they are interpreted as key-value
        pairs. Known arguments are:

        headers

            CGI headers.

        body

            CGI contents sent by upload.

        init_cgi

            Initialiase the object with headers from the environment variables
            and body from _stdin_. Use this option when using plain CGI.

    nscgiObject cookie cookie

        Return a list of values for cookie, if any. It is possible that more
        than one cookie with the same name can be present, so this method
        returns a list.

    nscgiObject decode str

        Decode strings in www-url-encoding, which represents special characters
        with a %xx sequence, where xx is the character code in hex.

    nscgiObject empty name

        Returns 1 if the CGI variable name is not present or has the empty
        string as its value.

    nscgiObject exists name

        The return value is a boolean. It returns *0* if the CGI variable name
        is not present, and *1* otherwise.

    nscgiObject encode string

        Encode string into www-url-encoded format.

    nscgiObject header ?type? args

        Return the CGI header as a string. This emits a Content-Type: header and
        additional headers based on args, which is a list of header names and
        header values. The type defaults to "text/html".

    nscgiObject import cginame ?tclname?

        This creates a variable in the current scope with the value of the CGI
        variable cginame. The name of the variable is tclname, or cginame if
        tclname is empty (default).

    nscgiObject importAll args

        This imports several CGI variables as Tcl variables. If args is empty,
        then every CGI value is imported. Otherwise each CGI variable listed in
        args is imported.

    nscgiObject importFile cmd cginame ?filename?

        This provides information about an uploaded file from a form input field
        of type *file* with name cginame. cmd can be one of -server -client,
        -type or -data.

        -client cginame

            returns the filename as sent by the client.

        -type cginame

            returns the mime type of the uploaded file.

        -data cginame

            returns the contents of the file.

        -server cginame filename

            writes the file contents to a local temporary file (or filename if
            supplied) and returns the name of the file. The caller is
            responsible for deleting this file after use.

    nscgiObject initCGI

        Initialize the *nscgi* object with environment variables and data read
        from _stdin_ for use with plain CGI.

    nscgiObject input ?fakeinput? ?fakecookie?

        This reads and decodes the CGI values. It restricts repeated form values
        to have a trailing "List" in their name. The CGI values are obtained
        later with the value method.

    nscgiObject multipart type query

        This method parses a multipart/form-data query. This is used by method
        nvlist and not normally called directly. It returns an alternating list
        of names and structured values. Each structure value is in turn a list
        of two elements. The first element is meta-data from the
        multipart/form-data structure. The second element is the form value. If
        you use method value you just get the form value. If you use method
        valueList you get the structured value with meta data and the value.

        The type is the whole Content-Type, including the parameters like
        boundary. This returns a list of names and values that describe the
        multipart data. The values are a nested list structure that has some
        descriptive information first, and the actual form value second. The
        descriptive information is list of header names and values that describe
        the content.

    nscgiObject nvlist

        This returns all the query data as a name, value list. In the case of
        multipart/form-data, the values are structured as described in method
        multipart.

    nscgiObject names

        This returns all names found in the query data, as a list.

    nscgiObject parse

        This reads and decodes the CGI values. The CGI values are obtained later
        with the value method. If a CGI value is repeated, then you should use
        mthod valueList to get the complete list of values.

    nscgiObject parseMimeValue value

        This decodes the Content-Type and other MIME headers that have the form
        of "primary value; param=val; p2=v2" It returns a list, where the first
        element is the primary value, and the second element is a list of
        parameter names and values.

    nscgiObject query

        This returns the raw query data.

    nscgiObject redirect url

        Generate a response that causes a 302 redirect by the Web server. The
        url is the new URL that is the target of the redirect. The URL will be
        qualified with the current server and current directory, if necessary,
        to convert it into a full URL.

    nscgiObject setCookie args

        Set a cookie value that will be returned as part of the reply. This must
        be done before header or redirect is called in order for the cookie to
        be returned properly. The args are a set of flags and values:

        -name name

        -value value

        -expires date

        -path path restriction

        -domain domain restriction

    nscgiObject setDefaultValue key defvalue

        Set a CGI value if it does not already exists. This affects future calls
        to method value (but not future calls to method nvlist). If the CGI
        value is already present, then this method has no side effects.

    nscgiObject setDefaultValueList key defvaluelist

        Like method setDefaultValue except that the value already has list
        structure to represent multiple checkboxes or a multi-selection.

    nscgiObject setValue key value

        Set a CGI value, overriding whatever was present in the CGI already.
        This affects future calls to method value (but not future calls to
        method nvlist).

    nscgiObject setValueList key valuelist

        Like method setValue except that the value already has list structure to
        represent multiple checkboxes or a multi-selection.

    nscgiObject type

        Returns the Content-Type of the current CGI values.

    nscgiObject urlStub ?url?

        Returns the current URL, but without the protocol, server, and port. If
        url is specified, then it defines the URL for the current session. That
        value will be returned by future calls to method urlStub

    nscgiObject value key ?default?

        Return the CGI value identified by key. If the CGI value is not present,
        then the default value is returned instead. This value defaults to the
        empty string.

        If the form value key is repeated, then there are two cases: if method
        parse was called, then method value only returns the first value
        associated with key. If method input was called, then method value
        returns a Tcl list value and key must end in "List" (e.g., "skuList").
        In the case of multipart/form-data, this method just returns the value
        of the form element. If you want the meta-data associated with each form
        value, then use method valueList.

    nscgiObject valueList key ?default?

        Like method value, but this always returns a list of values (even if
        there is only one value). In the case of multipart/form-data, this
        method returns a list of two elements. The first element is meta-data in
        the form of a parameter, value list. The second element is the form
        value.

Examples
========

Uploading a file


| HTML:
| <html>
| <form action="/cgi-bin/upload.cgi" method="POST" enctype="multipart/form-data">
| Path: <input type="file" name="filedata"><br>
| Name: <input type="text" name="filedesc"><br>
| <input type="submit">
| </form>
| </html>

| TCL: upload.cgi
| #!/usr/local/bin/tclsh

| package require nscgi

| # Create new nscgi object and initialise with environment variable and stdin
| set cgi [nscgi new init_cgi 1]
| $cgi parse
| set filedata [$cgi value filedata]
| set filedesc [$cgi value filedesc]

| puts "<html> File uploaded at <a href=\"/images/$filedesc\">$filedesc</a> </html>"

| set filename /www/images/$filedesc

| set fh [open $filename w]
| puts -nonewline $fh $filedata
| close $fh

Bugs, ideas, feedback
=====================

This document, and the package it describes, will undoubtedly contain bugs and
other problems. Please report such in the tracker. Please also report any ideas
for enhancements you may have for either package and/or documentation.

License
=======

The wrapper code is relased under the BSD license (specifically Modified BSD aka
New BSD aka 3-clause BSD). Check COPYING.BSD for more info about the license
used for this wrapper.

SEE ALSO
========

cgi, html

KEYWORDS
========

CGI, FCGI, SCGI, cookie, form, html

CATEGORY
========

CGI programming
